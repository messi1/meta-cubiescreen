--- a/drivers/video/sunxi/lcd/lcd0_panel_cfg.c	2015-07-22 22:54:43.238499010 +0200
+++ b/drivers/video/sunxi/lcd/lcd0_panel_cfg.c	2014-08-16 14:03:16.000000000 +0200
@@ -1,121 +1,329 @@
-/*
- * Copyright (C) 2007-2012 Allwinner Technology Co., Ltd.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 USA
- */
 
 #include "lcd_panel_cfg.h"
 
-/*
- * comment out this line if you want to use the lcd para define in
- * sys_config1.fex
- */
+//delete this line if you want to use the lcd para define in sys_config1.fex
 //#define LCD_PARA_USE_CONFIG
 
+static void LCD_power_on(__u32 sel);
+static void LCD_power_off(__u32 sel);
+static void LCD_bl_open(__u32 sel);
+static void LCD_bl_close(__u32 sel);
+
+
+static void LCD_panel_init(__u32 sel);
+static void LCD_panel_exit(__u32 sel);
+void lp079x01_init(void);
+void lp079x01_exit(void);
+
+void lcd_cmd_init(void);
+void lcd_cmd_exit(void);
+
+#define spi_csx_set(v)	(LCD_GPIO_write(0, 0, v))       //PI10,gpio0
+#define spi_sck_set(v)  (LCD_GPIO_write(0, 1, v))	//PI11,gpio1
+#define spi_sdi_set(v)  (LCD_GPIO_write(0, 2, v))	//PI12,gpio2
+#define lcd_rst_set(v)  (LCD_GPIO_write(0, 3, v))	//PH14,gpio3
+
+#define lcd_panel_rst(v)
+#define lcd_2828_rst(v) 
+#define lcd_2828_pd(v)  
+
+
 #ifdef LCD_PARA_USE_CONFIG
-static __u8 g_gamma_tbl[][2] = {
-	/* {input value, corrected value} */
-	{0, 0},
-	{15, 15},
-	{30, 30},
-	{45, 45},
-	{60, 60},
-	{75, 75},
-	{90, 90},
-	{105, 105},
-	{120, 120},
-	{135, 135},
-	{150, 150},
-	{165, 165},
-	{180, 180},
-	{195, 195},
-	{210, 210},
-	{225, 225},
-	{240, 240},
-	{255, 255},
+static __u8 g_gamma_tbl[][2] = 
+{
+        //{input value, corrected value}
+        {0, 0},
+        {15, 15},
+        {30, 30},
+        {45, 45},
+        {60, 60},
+        {75, 75},
+        {90, 90},
+        {105, 105},
+        {120, 120},
+        {135, 135},
+        {150, 150},
+        {165, 165},
+        {180, 180},
+        {195, 195},
+        {210, 210},
+        {225, 225},
+        {240, 240},
+        {255, 255},
 };
 
-static void lcd_gamma_gen(__panel_para_t *info)
+static void LCD_cfg_panel_info(__panel_para_t * info)
+{
+        __u32 i = 0, j=0;
+
+        memset(info,0,sizeof(__panel_para_t));
+
+        info->lcd_x             = 800;
+        info->lcd_y             = 480;
+        info->lcd_dclk_freq     = 33;       //MHz
+
+        info->lcd_pwm_not_used  = 0;
+        info->lcd_pwm_ch        = 0;
+        info->lcd_pwm_freq      = 10000;     //Hz
+        info->lcd_pwm_pol       = 0;
+
+        info->lcd_if            = 0;        //0:hv(sync+de); 1:8080; 2:ttl; 3:lvds
+
+        info->lcd_hbp           = 215;      //hsync back porch
+        info->lcd_ht            = 1055;     //hsync total cycle
+        info->lcd_hspw          = 0;        //hsync plus width
+        info->lcd_vbp           = 34;       //vsync back porch
+        info->lcd_vt            = 2 * 525;  //vysnc total cycle *2
+        info->lcd_vspw          = 0;        //vysnc plus width
+
+        info->lcd_hv_if         = 0;        //0:hv parallel 1:hv serial 
+        info->lcd_hv_smode      = 0;        //0:RGB888 1:CCIR656
+        info->lcd_hv_s888_if    = 0;        //serial RGB format
+        info->lcd_hv_syuv_if    = 0;        //serial YUV format
+
+        info->lcd_cpu_if        = 0;        //0:18bit 4:16bit
+        info->lcd_frm           = 0;        //0: disable; 1: enable rgb666 dither; 2:enable rgb656 dither
+
+        info->lcd_lvds_ch       = 0;        //0:single channel; 1:dual channel
+        info->lcd_lvds_mode     = 0;        //0:NS mode; 1:JEIDA mode
+        info->lcd_lvds_bitwidth = 0;        //0:24bit; 1:18bit
+        info->lcd_lvds_io_cross = 0;        //0:normal; 1:pn cross
+
+        info->lcd_io_cfg0       = 0x10000000;
+
+        info->lcd_gamma_correction_en = 0;
+        if(info->lcd_gamma_correction_en)
+        {
+                __u32 items = sizeof(g_gamma_tbl)/2;
+
+        for(i=0; i<items-1; i++)
+        {
+                __u32 num = g_gamma_tbl[i+1][0] - g_gamma_tbl[i][0];
+
+                //__inf("handling{%d,%d}\n", g_gamma_tbl[i][0], g_gamma_tbl[i][1]);
+                for(j=0; j<num; j++)
+                {
+                        __u32 value = 0;
+
+                        value = g_gamma_tbl[i][1] + ((g_gamma_tbl[i+1][1] - g_gamma_tbl[i][1]) * j)/num;
+                        info->lcd_gamma_tbl[g_gamma_tbl[i][0] + j] = (value<<16) + (value<<8) + value;
+                        //__inf("----gamma %d, %d\n", g_gamma_tbl[i][0] + j, value);
+                }
+        }
+        info->lcd_gamma_tbl[255] = (g_gamma_tbl[items-1][1]<<16) + (g_gamma_tbl[items-1][1]<<8) + g_gamma_tbl[items-1][1];
+        //__inf("----gamma 255, %d\n", g_gamma_tbl[items-1][1]);
+        }
+}
+#endif
+
+void spi_9bit_wire(__u32 tx)
 {
-	__u32 items = sizeof(g_gamma_tbl) / 2;
-	__u32 i, j;
+	__u8 i;
 
-	for (i = 0; i < items - 1; i++) {
-		__u32 num = g_gamma_tbl[i + 1][0] - g_gamma_tbl[i][0];
+	spi_csx_set(0);
 
-		for (j = 0; j < num; j++) {
-			__u32 value = 0;
-
-			value = g_gamma_tbl[i][1] +
-				((g_gamma_tbl[i + 1][1] -
-				  g_gamma_tbl[i][1]) * j) / num;
-			info->lcd_gamma_tbl[g_gamma_tbl[i][0] + j] =
-				(value << 16) + (value << 8) + value;
-		}
+	for(i=0;i<9;i++)
+	{
+		LCD_delay_us(1);
+		spi_sck_set(0);
+		LCD_delay_us(1);
+		if(tx & (1 << 8))
+			spi_sdi_set(1);
+		else
+			spi_sdi_set(0);
+		LCD_delay_us(1);
+		spi_sck_set(1);
+		LCD_delay_us(1);
+		tx <<= 1;
 	}
-	info->lcd_gamma_tbl[255] = (g_gamma_tbl[items - 1][1] << 16) +
-		(g_gamma_tbl[items - 1][1] << 8) + g_gamma_tbl[items - 1][1];
+	spi_sck_set(0);
+	LCD_delay_us(1);
+	spi_csx_set(1);
+	LCD_delay_us(1);
 }
 
-static void LCD_cfg_panel_info(__panel_para_t *info)
+static __s32 LCD_open_flow(__u32 sel)
 {
-	memset(info, 0, sizeof(__panel_para_t));
+	LCD_OPEN_FUNC(sel, LCD_power_on, 10);           //open lcd power, and delay 50ms
 
-	info->lcd_x = 800;
-	info->lcd_y = 480;
-	info->lcd_dclk_freq = 33; /* MHz */
+	LCD_OPEN_FUNC(sel, LCD_panel_init, 120);         //open lcd controller, and delay 100ms
 
-	info->lcd_ht = 1055; /* htotal */
-	info->lcd_hbp = 215; /* h back porch */
-	info->lcd_hv_hspw = 0; /* hsync */
-	info->lcd_vt = 525 * 2; /* vtotal * 2 */
-	info->lcd_vbp = 34; /* v back porch */
-	info->lcd_hv_vspw = 0; /* vsync */
+	LCD_OPEN_FUNC(sel, TCON_open,	120);           //open lcd power, than delay 200ms
 
-	info->lcd_if = 0; /* 0:hv(sync+de); 1:cpu/8080; 2:ttl; 3:lvds */
+	LCD_OPEN_FUNC(sel, LCD_bl_open, 0);             //open lcd backlight, and delay 0ms
 
-	info->lcd_hv_if = 0; /* 0:hv parallel; 1:hv serial; 2:ccir656 */
-	info->lcd_hv_smode = 0; /* 0:RGB888 1:CCIR656 */
-	info->lcd_hv_s888_if = 0; /* serial RGB format */
-	info->lcd_hv_syuv_if = 0; /* serial YUV format */
+	printk(KERN_WARNING"******************* LCD_open_flow*************************");
+	return 0;
+}
 
-	info->lcd_cpu_if = 0; /* 0:18bit 4:16bit */
-	info->lcd_frm = 0; /* 0:direct; 1:rgb666 dither; 2:rgb656 dither */
+static __s32 LCD_close_flow(__u32 sel)
+{	
+	LCD_CLOSE_FUNC(sel, LCD_bl_close, 0);           //close lcd backlight, and delay 0ms
+	LCD_CLOSE_FUNC(sel, LCD_panel_exit, 0);         //close lcd controller, and delay 0ms
+	LCD_CLOSE_FUNC(sel, TCON_close,	50);            //open lcd power, than delay 200ms
+	LCD_CLOSE_FUNC(sel, LCD_power_off, 50);         //close lcd power, and delay 500ms
+	return 0;
+}
 
-	info->lcd_lvds_ch = 0; /* 0:single link; 1:dual link */
-	info->lcd_lvds_mode = 0; /* 0:NS mode; 1:JEIDA mode */
-	info->lcd_lvds_bitwidth = 0; /* 0:24bit; 1:18bit */
-	info->lcd_lvds_io_cross = 0; /* 0:normal; 1:pn cross */
+static void LCD_power_on(__u32 sel)
+{
+        LCD_POWER_EN(sel, 1);//config lcd_power pin to open lcd power
+}
 
-	info->lcd_pwm_not_used = 0;
-	info->lcd_pwm_ch = 0;
-	info->lcd_pwm_freq = 10000; /* Hz */
-	info->lcd_pwm_pol = 0;
+static void LCD_power_off(__u32 sel)
+{
+        LCD_POWER_EN(sel, 0);//config lcd_power pin to close lcd power
+}
 
-	info->lcd_io_cfg0 = 0x10000000; /* clock phase */
+static void LCD_bl_open(__u32 sel)
+{
+        LCD_PWM_EN(sel, 1);//open pwm module
+        LCD_BL_EN(sel, 1);//config lcd_bl_en pin to open lcd backlight
+}
 
-	info->lcd_gamma_correction_en = 0;
-	if (info->lcd_gamma_correction_en)
-		lcd_gamma_gen(info);
+static void LCD_bl_close(__u32 sel)
+{
+        LCD_BL_EN(sel, 0);//config lcd_bl_en pin to close lcd backlight
+        LCD_PWM_EN(sel, 0);//close pwm module
+}
+
+static void LCD_panel_init(__u32 sel)
+{
+	printk(KERN_WARNING"******************* lcd_panel_init*************************");
+       	lcd_cmd_init();
+        return;
+}
+
+static void LCD_panel_exit(__u32 sel)
+{
+        lcd_cmd_exit();
+        return;
 }
-#endif
 
-void LCD_get_panel_funs_0(__lcd_panel_fun_t *fun)
+//sel: 0:lcd0; 1:lcd1
+static __s32 LCD_user_defined_func(__u32 sel, __u32 para1, __u32 para2, __u32 para3)
+{
+        return 0;
+}
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun)
 {
 #ifdef LCD_PARA_USE_CONFIG
-	fun->cfg_panel_info = LCD_cfg_panel_info;
+        fun->cfg_panel_info = LCD_cfg_panel_info;//delete this line if you want to use the lcd para define in sys_config1.fex
 #endif
+        fun->cfg_open_flow = LCD_open_flow;
+        fun->cfg_close_flow = LCD_close_flow;
+        fun->lcd_user_defined_func = LCD_user_defined_func;
+}
+
+void lcd_cmd_init(void)
+{
+	//Hardware pin reset 
+        lcd_rst_set(0);
+        LCD_delay_ms(1);
+        lcd_rst_set(1);
+        LCD_delay_ms(1);
+		
+
+	//software reset
+	spi_9bit_wire(0x001);
+        LCD_delay_ms(120);
+
+	//VGH/VGL Setting
+	spi_9bit_wire(0x0C1);
+	spi_9bit_wire(0x1A8);
+	spi_9bit_wire(0x1B1);
+	spi_9bit_wire(0x145);
+	spi_9bit_wire(0x104);
+
+	//VCOMDC
+	spi_9bit_wire(0x0C5);
+	spi_9bit_wire(0x180);
+	spi_9bit_wire(0x168);
+
+	//GVDD/GVSS
+	spi_9bit_wire(0x0C6);
+	spi_9bit_wire(0x1BD);
+	spi_9bit_wire(0x184);
+
+	//NGVDD/NGVSS
+	spi_9bit_wire(0x0C7);
+	spi_9bit_wire(0x1BD);
+	spi_9bit_wire(0x184);
+	//Sleep out
+	spi_9bit_wire(0x011);
+        LCD_delay_ms(120);
+
+	//Gamma Setting
+	spi_9bit_wire(0x0F2);
+	spi_9bit_wire(0x100);
+	spi_9bit_wire(0x100);
+	spi_9bit_wire(0x182);
+
+	//Gamma enable
+	spi_9bit_wire(0x026);
+	spi_9bit_wire(0x108);
+
+	//Positive gamma setting
+	spi_9bit_wire(0x0E0);
+	spi_9bit_wire(0x100);
+	spi_9bit_wire(0x106);
+	spi_9bit_wire(0x10B);
+	spi_9bit_wire(0x10D);
+	spi_9bit_wire(0x10F);
+	spi_9bit_wire(0x113);
+	spi_9bit_wire(0x10D);
+	spi_9bit_wire(0x10D);
+	spi_9bit_wire(0x100);
+	spi_9bit_wire(0x104);
+	spi_9bit_wire(0x109);
+	spi_9bit_wire(0x113);
+	spi_9bit_wire(0x114);
+	spi_9bit_wire(0x12B);
+	spi_9bit_wire(0x126);
+	spi_9bit_wire(0x123);
+
+	//Negative gamma setting
+	spi_9bit_wire(0x0E1);
+	spi_9bit_wire(0x100);
+	spi_9bit_wire(0x106);
+	spi_9bit_wire(0x10B);
+	spi_9bit_wire(0x10D);
+	spi_9bit_wire(0x10F);
+	spi_9bit_wire(0x113);
+	spi_9bit_wire(0x10D);
+	spi_9bit_wire(0x10D);
+	spi_9bit_wire(0x100);
+	spi_9bit_wire(0x104);
+	spi_9bit_wire(0x109);
+	spi_9bit_wire(0x113);
+	spi_9bit_wire(0x114);
+	spi_9bit_wire(0x12B);
+	spi_9bit_wire(0x126);
+	spi_9bit_wire(0x123);
+
+	//Enable gamma setting
+	spi_9bit_wire(0x026);
+	spi_9bit_wire(0x108);
+
+	//Enable 2-dot func
+	spi_9bit_wire(0x0FD);
+	spi_9bit_wire(0x100);
+	spi_9bit_wire(0x108);
+
+	//Display on
+	spi_9bit_wire(0x029);
+}
+
+void lcd_cmd_exit(void)
+{
+	//power off
+	spi_9bit_wire(0x010);
 }
+
+void lp079x01_exit(void)
+{
+}
+
+//EXPORT_SYMBOL(LCD_get_panel_funs_0);
+
--- a/drivers/video/sunxi/lcd/lcd_panel_cfg.h	2015-07-22 22:54:43.238499010 +0200
+++ b/drivers/video/sunxi/lcd/lcd_panel_cfg.h	2014-08-16 14:03:32.000000000 +0200
@@ -1,71 +1,75 @@
-/*
- * Copyright (C) 2007-2012 Allwinner Technology Co., Ltd.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of
- * the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
- * MA 02111-1307 USA
- */
 
 #ifndef __LCD_PANNEL_CFG_H__
 #define __LCD_PANNEL_CFG_H__
 
 #include "dev_lcd.h"
 
-void LCD_power_on_generic(__u32 sel);
-void LCD_power_off_generic(__u32 sel);
-void LCD_bl_open_generic(__u32 sel);
-void LCD_bl_close_generic(__u32 sel);
-__s32 LCD_open_flow_generic(__u32 sel);
-__s32 LCD_close_flow_generic(__u32 sel);
-__s32 LCD_user_defined_func_generic(__u32 sel, __u32 para1, __u32 para2,
-				    __u32 para3);
-void LCD_get_panel_funs_generic(__lcd_panel_fun_t *fun);
-
-void LCD_get_panel_funs_0(__lcd_panel_fun_t *fun);
-void LCD_get_panel_funs_1(__lcd_panel_fun_t *fun);
-
-#define BIT0	0x00000001
-#define BIT1	0x00000002
-#define BIT2	0x00000004
-#define BIT3	0x00000008
-#define BIT4	0x00000010
-#define BIT5	0x00000020
-#define BIT6	0x00000040
-#define BIT7	0x00000080
-#define BIT8	0x00000100
-#define BIT9	0x00000200
-#define BIT10	0x00000400
-#define BIT11	0x00000800
-#define BIT12	0x00001000
-#define BIT13	0x00002000
-#define BIT14	0x00004000
-#define BIT15	0x00008000
-#define BIT16	0x00010000
-#define BIT17	0x00020000
-#define BIT18	0x00040000
-#define BIT19	0x00080000
-#define BIT20	0x00100000
-#define BIT21	0x00200000
-#define BIT22	0x00400000
-#define BIT23	0x00800000
-#define BIT24	0x01000000
-#define BIT25	0x02000000
-#define BIT26	0x04000000
-#define BIT27	0x08000000
-#define BIT28	0x10000000
-#define BIT29	0x20000000
-#define BIT30	0x40000000
-#define BIT31	0x80000000
+
+void LCD_get_panel_funs_0(__lcd_panel_fun_t * fun);
+void LCD_get_panel_funs_1(__lcd_panel_fun_t * fun);
+
+extern void LCD_OPEN_FUNC(__u32 sel, LCD_FUNC func, __u32 delay/*ms*/);
+extern void LCD_CLOSE_FUNC(__u32 sel, LCD_FUNC func, __u32 delay/*ms*/);
+extern void LCD_get_reg_bases(__reg_bases_t *para);
+extern void LCD_delay_ms(__u32 ms) ;
+extern void LCD_delay_us(__u32 ns);
+extern void TCON_open(__u32 sel);
+extern void TCON_close(__u32 sel);
+extern __s32 LCD_PWM_EN(__u32 sel, __bool b_en);
+extern __s32 LCD_BL_EN(__u32 sel, __bool b_en);
+extern __s32 LCD_POWER_EN(__u32 sel, __bool b_en);
+extern void LCD_CPU_register_irq(__u32 sel, void (*Lcd_cpuisr_proc) (void));
+extern void LCD_CPU_WR(__u32 sel, __u32 index, __u32 data);
+extern void LCD_CPU_WR_INDEX(__u32 sel,__u32 index);
+extern void LCD_CPU_WR_DATA(__u32 sel, __u32 data);
+extern void LCD_CPU_AUTO_FLUSH(__u32 sel, __bool en);
+extern __s32 LCD_GPIO_request(__u32 sel, __u32 io_index);
+extern __s32 LCD_GPIO_release(__u32 sel,__u32 io_index);
+extern __s32 LCD_GPIO_set_attr(__u32 sel,__u32 io_index, __bool b_output);
+extern __s32 LCD_GPIO_read(__u32 sel,__u32 io_index);
+extern __s32 LCD_GPIO_write(__u32 sel,__u32 io_index, __u32 data);
+
+extern __s32 pwm_set_para(__u32 channel, __pwm_info_t * pwm_info);
+extern __s32 pwm_get_para(__u32 channel, __pwm_info_t * pwm_info);
+extern __s32 lcd_get_panel_para(__u32 sel,__panel_para_t * info);
+extern void LCD_get_panel_funs_generic(__lcd_panel_fun_t *fun);
+
+#define BIT0		  0x00000001  
+#define BIT1		  0x00000002  
+#define BIT2		  0x00000004  
+#define BIT3		  0x00000008  
+#define BIT4		  0x00000010  
+#define BIT5		  0x00000020  
+#define BIT6		  0x00000040  
+#define BIT7		  0x00000080  
+#define BIT8		  0x00000100  
+#define BIT9		  0x00000200  
+#define BIT10		  0x00000400  
+#define BIT11		  0x00000800  
+#define BIT12		  0x00001000  
+#define BIT13		  0x00002000  
+#define BIT14		  0x00004000  
+#define BIT15		  0x00008000  
+#define BIT16		  0x00010000  
+#define BIT17		  0x00020000  
+#define BIT18		  0x00040000  
+#define BIT19		  0x00080000  
+#define BIT20		  0x00100000  
+#define BIT21		  0x00200000  
+#define BIT22		  0x00400000  
+#define BIT23		  0x00800000  
+#define BIT24		  0x01000000  
+#define BIT25		  0x02000000  
+#define BIT26		  0x04000000  
+#define BIT27		  0x08000000  
+#define BIT28		  0x10000000  
+#define BIT29		  0x20000000  
+#define BIT30		  0x40000000  
+#define BIT31		  0x80000000 
+
+#define sys_get_wvalue(n)   (*((volatile __u32 *)(n)))          /* word input */
+#define sys_put_wvalue(n,c) (*((volatile __u32 *)(n))  = (c))   /* word output */
+
 
 #endif
+
