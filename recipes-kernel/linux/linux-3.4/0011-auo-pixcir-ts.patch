diff --git a/drivers/input/touchscreen/auo-pixcir-ts.c b/drivers/input/touchscreen/auo-pixcir-ts.c
index c7047b6..56d6582 100644
--- a/drivers/input/touchscreen/auo-pixcir-ts.c
+++ b/drivers/input/touchscreen/auo-pixcir-ts.c
@@ -27,10 +27,13 @@
 #include <linux/input.h>
 #include <linux/jiffies.h>
 #include <linux/i2c.h>
+#include <linux/i2c-dev.h>
 #include <linux/mutex.h>
 #include <linux/delay.h>
 #include <linux/gpio.h>
 #include <linux/input/auo-pixcir-ts.h>
+#include <plat/sys_config.h>
+#include "ctp_platform_ops.h"
 
 /*
  * Coordinate calculation:
@@ -39,14 +42,14 @@
  * X2 = X2_LSB + X2_MSB*256
  * Y2 = Y2_LSB + Y2_MSB*256
  */
-#define AUO_PIXCIR_REG_X1_LSB		0x00
-#define AUO_PIXCIR_REG_X1_MSB		0x01
-#define AUO_PIXCIR_REG_Y1_LSB		0x02
-#define AUO_PIXCIR_REG_Y1_MSB		0x03
-#define AUO_PIXCIR_REG_X2_LSB		0x04
-#define AUO_PIXCIR_REG_X2_MSB		0x05
-#define AUO_PIXCIR_REG_Y2_LSB		0x06
-#define AUO_PIXCIR_REG_Y2_MSB		0x07
+#define AUO_PIXCIR_REG_X1_LSB		0x40
+#define AUO_PIXCIR_REG_X1_MSB		0x44
+#define AUO_PIXCIR_REG_Y1_LSB		0x41
+#define AUO_PIXCIR_REG_Y1_MSB		0x45
+#define AUO_PIXCIR_REG_X2_LSB		0x42
+#define AUO_PIXCIR_REG_X2_MSB		0x46
+#define AUO_PIXCIR_REG_Y2_LSB		0x42
+#define AUO_PIXCIR_REG_Y2_MSB		0x47
 
 #define AUO_PIXCIR_REG_STRENGTH		0x0d
 #define AUO_PIXCIR_REG_STRENGTH_X1_LSB	0x0e
@@ -55,13 +58,13 @@
 #define AUO_PIXCIR_REG_RAW_DATA_X	0x2b
 #define AUO_PIXCIR_REG_RAW_DATA_Y	0x4f
 
-#define AUO_PIXCIR_REG_X_SENSITIVITY	0x6f
-#define AUO_PIXCIR_REG_Y_SENSITIVITY	0x70
-#define AUO_PIXCIR_REG_INT_SETTING	0x71
-#define AUO_PIXCIR_REG_INT_WIDTH	0x72
-#define AUO_PIXCIR_REG_POWER_MODE	0x73
+#define AUO_PIXCIR_REG_X_SENSITIVITY	0x67
+#define AUO_PIXCIR_REG_Y_SENSITIVITY	0x68
+#define AUO_PIXCIR_REG_INT_SETTING	0x6e
+#define AUO_PIXCIR_REG_INT_WIDTH	0x6f
+#define AUO_PIXCIR_REG_POWER_MODE	0x70
 
-#define AUO_PIXCIR_REG_VERSION		0x77
+#define AUO_PIXCIR_REG_VERSION		0xa6
 #define AUO_PIXCIR_REG_CALIBRATE	0x78
 
 #define AUO_PIXCIR_REG_TOUCHAREA_X1	0x1e
@@ -107,6 +110,27 @@
 #define AUO_PIXCIR_REPORT_POINTS	2
 #define AUO_PIXCIR_MAX_AREA		0xff
 #define AUO_PIXCIR_PENUP_TIMEOUT_MS	10
+#define AUO_PIXCIR_I2C_ADDR		0x5c
+
+#define CTP_IRQ_NO			(gpio_int_info[0].port_num)
+#define CTP_IRQ_MODE			(NEGATIVE_EDGE)
+
+#ifdef PRINT_INT_INFO
+#define print_int_info(fmt, args...)     \
+        do{                              \
+                pr_info(fmt, ##args);     \
+        }while(0)
+#else
+#define print_int_info(fmt, args...)   //
+#endif
+
+static void* __iomem gpio_addr = NULL;
+static user_gpio_set_t gpio_int_info[1];
+static int gpio_int_hdle = 0;
+static int	int_cfg_addr[]={PIO_INT_CFG0_OFFSET,PIO_INT_CFG1_OFFSET,
+			PIO_INT_CFG2_OFFSET, PIO_INT_CFG3_OFFSET};
+
+static int ctp_set_irq_mode(char *major_key, char *subkey, ext_int_mode int_mode);
 
 struct auo_pixcir_ts {
 	struct i2c_client	*client;
@@ -127,6 +151,12 @@ struct auo_point_t {
 	int	area_minor;
 	int	orientation;
 };
+static const unsigned short normal_i2c[] =
+     { AUO_PIXCIR_I2C_ADDR, AUO_PIXCIR_I2C_ADDR + 1, I2C_CLIENT_END };
+
+struct auo_pixcir_ts_platdata platdata = {7, 0x8, NULL, NULL, 800, 480};
+
+static struct i2c_client *auo_pixcir_i2c_client;
 
 static int auo_pixcir_collect_data(struct auo_pixcir_ts *ts,
 				   struct auo_point_t *point)
@@ -265,24 +295,43 @@ static int auo_pixcir_power_mode(struct auo_pixcir_ts *ts, int mode)
 {
 	struct i2c_client *client = ts->client;
 	int ret;
+	int value, count = 0;
 
 	ret = i2c_smbus_read_byte_data(client, AUO_PIXCIR_REG_POWER_MODE);
 	if (ret < 0) {
-		dev_err(&client->dev, "unable to read reg %Xh, %d\n",
-			AUO_PIXCIR_REG_POWER_MODE, ret);
-		return ret;
+		while(count < 100){
+			ret = i2c_smbus_read_byte_data(client, AUO_PIXCIR_REG_POWER_MODE);
+			if(ret >= 0)
+				break;
+			count++;
+		}
+		if (ret < 0) {
+			dev_err(&client->dev, "unable to read reg %Xh, %d\n",
+				AUO_PIXCIR_REG_POWER_MODE, ret);
+			return ret;
+		}
 	}
-
+printk("Count: %d\n", count);
 	ret &= ~AUO_PIXCIR_POWER_MASK;
-	ret |= mode;
+	value = ret | mode;
+	count = 0;
+printk("Write 0x%x to the address 0x%x\n", value, AUO_PIXCIR_REG_POWER_MODE);
 
-	ret = i2c_smbus_write_byte_data(client, AUO_PIXCIR_REG_POWER_MODE, ret);
-	if (ret) {
-		dev_err(&client->dev, "unable to write reg %Xh, %d\n",
-			AUO_PIXCIR_REG_POWER_MODE, ret);
-		return ret;
+	ret = i2c_smbus_write_byte_data(client, AUO_PIXCIR_REG_POWER_MODE, value);
+	if (ret < 0) {
+		while(count < 100){
+			ret = i2c_smbus_write_byte_data(client, AUO_PIXCIR_REG_POWER_MODE, value);
+			if(ret >= 0)
+				break;
+			count++;
+		}
+		if (ret < 0) {
+			dev_err(&client->dev, "unable to write reg %Xh, %d\n",
+				AUO_PIXCIR_REG_POWER_MODE, ret);
+			return ret;
+		}
 	}
-
+printk("Count: %d\n", count);
 	return 0;
 }
 
@@ -398,7 +447,7 @@ static int auo_pixcir_input_open(struct input_dev *dev)
 {
 	struct auo_pixcir_ts *ts = input_get_drvdata(dev);
 	int ret;
-
+printk("==Bla bla==\n");
 	ret = auo_pixcir_start(ts);
 	if (ret)
 		return ret;
@@ -490,27 +539,55 @@ static int __devinit auo_pixcir_probe(struct i2c_client *client,
 	struct input_dev *input_dev;
 	int ret;
 
+	if(client){
+		printk("client flags: %d, irq: %d, addr: %d, name: %s\n", client->flags, client->irq, client->addr, client->name);
+	}
+	else
+		printk("client is empty\n");
+
+	if(!id){
+		printk("id is empty\n");
+	}
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		return -ENODEV;
+	}
+
+printk("==auo_pixcir_probe==\n");
+	
 	if (!pdata)
 		return -EINVAL;
-
+printk("b1\n");
 	ts = kzalloc(sizeof(struct auo_pixcir_ts), GFP_KERNEL);
 	if (!ts)
 		return -ENOMEM;
-
-	ret = gpio_request(pdata->gpio_int, "auo_pixcir_ts_int");
+printk("b2\n");
+/*	ret = gpio_request(pdata->gpio_int, "auo_pixcir_ts_int");
 	if (ret) {
 		dev_err(&client->dev, "request of gpio %d failed, %d\n",
 			pdata->gpio_int, ret);
 		goto err_gpio_int;
 	}
+*/
+	ret = ctp_set_irq_mode("ctp_para", "ctp_int_port", CTP_IRQ_MODE);
+	if(ret < 0){
+		pr_info("%s:ctp_ops.set_irq_mode err.\n", __func__);
+		goto err_gpio_int;
+	}
 
+	ret = request_irq(SW_INT_IRQNO_PIO, auo_pixcir_interrupt, IRQF_SHARED, "auo_pixcir_ts", ts);
+	if (ret < 0) {
+		dev_err(&client->dev, "auo_pixcir_probe: request irq failed\n");
+		goto err_gpio_int;
+	}
+printk("b3\n");
 	if (pdata->init_hw)
 		pdata->init_hw(client);
-
+printk("b4\n");
 	ts->client = client;
 	ts->touch_ind_mode = 0;
 	init_waitqueue_head(&ts->wait);
-
+printk("b5\n");
 	snprintf(ts->phys, sizeof(ts->phys),
 		 "%s/input0", dev_name(&client->dev));
 
@@ -519,7 +596,7 @@ static int __devinit auo_pixcir_probe(struct i2c_client *client,
 		dev_err(&client->dev, "could not allocate input device\n");
 		goto err_input_alloc;
 	}
-
+printk("b6\n");
 	ts->input = input_dev;
 
 	input_dev->name = "AUO-Pixcir touchscreen";
@@ -529,60 +606,68 @@ static int __devinit auo_pixcir_probe(struct i2c_client *client,
 
 	input_dev->open = auo_pixcir_input_open;
 	input_dev->close = auo_pixcir_input_close;
-
+printk("b7\n");
 	__set_bit(EV_ABS, input_dev->evbit);
+printk("b77\n");
 	__set_bit(EV_KEY, input_dev->evbit);
-
+printk("b8\n");
 	__set_bit(BTN_TOUCH, input_dev->keybit);
-
+printk("b9\n");
 	/* For single touch */
 	input_set_abs_params(input_dev, ABS_X, 0, pdata->x_max, 0, 0);
+printk("b10\n");
 	input_set_abs_params(input_dev, ABS_Y, 0, pdata->y_max, 0, 0);
-
+printk("b11\n");
 	/* For multi touch */
 	input_set_abs_params(input_dev, ABS_MT_POSITION_X, 0,
 			     pdata->x_max, 0, 0);
+printk("b12\n");
 	input_set_abs_params(input_dev, ABS_MT_POSITION_Y, 0,
 			     pdata->y_max, 0, 0);
+printk("b13\n");
 	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0,
 			     AUO_PIXCIR_MAX_AREA, 0, 0);
+printk("b14\n");
 	input_set_abs_params(input_dev, ABS_MT_TOUCH_MINOR, 0,
 			     AUO_PIXCIR_MAX_AREA, 0, 0);
+printk("b15\n");	
 	input_set_abs_params(input_dev, ABS_MT_ORIENTATION, 0, 1, 0, 0);
+printk("b16\n");
+//	ret = i2c_smbus_read_byte_data(client, AUO_PIXCIR_REG_VERSION);
+//	if (ret < 0)
+//		goto err_fw_vers;
+//	dev_info(&client->dev, "firmware version 0x%X\n", ret);
 
-	ret = i2c_smbus_read_byte_data(client, AUO_PIXCIR_REG_VERSION);
-	if (ret < 0)
-		goto err_fw_vers;
-	dev_info(&client->dev, "firmware version 0x%X\n", ret);
-
+printk("b17\n");
 	ret = auo_pixcir_int_config(ts, pdata->int_setting);
 	if (ret)
 		goto err_fw_vers;
-
+printk("b18\n");
 	input_set_drvdata(ts->input, ts);
 	ts->stopped = true;
-
-	ret = request_threaded_irq(client->irq, NULL, auo_pixcir_interrupt,
+printk("b19\n");
+/*	ret = request_threaded_irq(client->irq, NULL, auo_pixcir_interrupt,
 				   IRQF_TRIGGER_RISING | IRQF_ONESHOT,
-				   input_dev->name, ts);
-	if (ret) {
+				   input_dev->name, ts);*/
+printk("b20\n");
+/*	if (ret) {
 		dev_err(&client->dev, "irq %d requested failed\n", client->irq);
 		goto err_fw_vers;
-	}
-
+	}*/
+printk("b21\n");
 	/* stop device and put it into deep sleep until it is opened */
 	ret = auo_pixcir_stop(ts);
 	if (ret < 0)
 		goto err_input_register;
-
+printk("b22\n");
 	ret = input_register_device(input_dev);
 	if (ret) {
 		dev_err(&client->dev, "could not register input device\n");
 		goto err_input_register;
 	}
-
+printk("b23\n");
 	i2c_set_clientdata(client, ts);
-
+printk("b24\n");
 	return 0;
 
 err_input_register:
@@ -629,13 +714,148 @@ static struct i2c_driver auo_pixcir_driver = {
 		.owner	= THIS_MODULE,
 		.name	= "auo_pixcir_ts",
 		.pm	= &auo_pixcir_pm_ops,
-	},
+	},	
 	.probe		= auo_pixcir_probe,
 	.remove		= __devexit_p(auo_pixcir_remove),
 	.id_table	= auo_pixcir_idtable,
 };
 
-module_i2c_driver(auo_pixcir_driver);
+
+static struct i2c_board_info __initdata i2c_board_info[] = {
+   {
+	I2C_BOARD_INFO("auo_pixcir_ts", 0x5c), /* i2c address */
+	.platform_data = &platdata,
+	.irq = 60,
+   },
+};
+
+static int __init auo_pixcir_init(void)
+{
+	struct i2c_adapter *i2c_adap;
+	int ret = 0;
+printk("a0\n");
+printk("==auo_pixcir_init==\n");
+	
+ 	ret = i2c_add_driver(&auo_pixcir_driver);
+        if (ret < 0) {
+                 printk(KERN_ERR "failed to add auo_pixcir driver");
+                 goto out;
+         }
+printk("a1\n");
+         i2c_adap = i2c_get_adapter(1);
+//printk("a2\n");
+//         memset(&i2c_info, 0, sizeof(struct i2c_board_info));
+//printk("a3\n");
+ //        strlcpy(i2c_info.type, "auo_pixcir_ts", I2C_NAME_SIZE);
+//printk("a4\n");
+         auo_pixcir_i2c_client = i2c_new_probed_device(i2c_adap, &(i2c_board_info[0]),
+                                                    normal_i2c, NULL);
+printk("a5\n");
+         if (!auo_pixcir_i2c_client) {
+                 printk(KERN_ERR "failed to connect I2C to auo_pixcir");
+                 ret = -ENODEV;
+                 goto out_i2c_driver;
+         }
+printk("a6\n");
+         i2c_put_adapter(i2c_adap);
+printk("a7\n");
+	return 0;
+
+out_i2c_driver:
+	i2c_del_driver(&auo_pixcir_driver);
+out:
+	return ret;
+}
+
+static void __exit auo_pixcir_cleanup(void)
+{
+         i2c_del_driver(&auo_pixcir_driver);
+}
+
+static void ctp_clear_penirq(void)
+{
+	int reg_val;
+	//clear the IRQ_EINT29 interrupt pending
+	//pr_info("clear pend irq pending\n");
+	reg_val = readl(gpio_addr + PIO_INT_STAT_OFFSET);
+	//writel(reg_val,gpio_addr + PIO_INT_STAT_OFFSET);
+	//writel(reg_val&(1<<(IRQ_EINT21)),gpio_addr + PIO_INT_STAT_OFFSET);
+	if((reg_val = (reg_val&(1<<(CTP_IRQ_NO))))){
+		print_int_info("==CTP_IRQ_NO=\n");
+		writel(reg_val,gpio_addr + PIO_INT_STAT_OFFSET);
+	}
+	return;
+}
+
+static int ctp_set_irq_mode(char *major_key, char *subkey, ext_int_mode int_mode)
+{
+	int ret = 0;
+	__u32 reg_num = 0;
+	__u32 reg_addr = 0;
+	__u32 reg_val = 0;
+
+	gpio_addr = ioremap(PIO_BASE_ADDRESS, PIO_RANGE_SIZE);
+	//pr_info("%s, gpio_addr = 0x%x. \n", __func__, gpio_addr);
+	if(!gpio_addr) {
+		ret = -EIO;
+		goto exit_ioremap_failed;
+	}
+
+	//config gpio to int mode
+	pr_info("%s: config gpio to int mode. \n", __func__);
+#ifndef SYSCONFIG_GPIO_ENABLE
+#else
+	if(gpio_int_hdle){
+		gpio_release(gpio_int_hdle, 2);
+	}
+	gpio_int_hdle = gpio_request_ex(major_key, subkey);
+	if(!gpio_int_hdle){
+		pr_info("request tp_int_port failed. \n");
+		ret = -1;
+		goto request_tp_int_port_failed;
+	}
+	gpio_get_one_pin_status(gpio_int_hdle, gpio_int_info, subkey, 1);
+	pr_info("%s, %d: gpio_int_info, port = %d, port_num = %d. \n", __func__, __LINE__, \
+		gpio_int_info[0].port, gpio_int_info[0].port_num);
+#endif
+
+#ifdef AW_GPIO_INT_API_ENABLE
+#else
+	pr_info(" INTERRUPT CONFIG\n");
+	reg_num = (gpio_int_info[0].port_num)%8;
+	reg_addr = (gpio_int_info[0].port_num)/8;
+	reg_val = readl(gpio_addr + int_cfg_addr[reg_addr]);
+	reg_val &= (~(7 << (reg_num * 4)));
+	reg_val |= (int_mode << (reg_num * 4));
+	writel(reg_val,gpio_addr+int_cfg_addr[reg_addr]);
+
+	ctp_clear_penirq();
+
+	reg_val = readl(gpio_addr+PIO_INT_CTRL_OFFSET);
+	reg_val |= (1 << (gpio_int_info[0].port_num));
+	writel(reg_val,gpio_addr+PIO_INT_CTRL_OFFSET);
+
+	udelay(1);
+#endif
+
+request_tp_int_port_failed:
+	return ret;
+
+exit_ioremap_failed:
+	if(gpio_addr){
+		iounmap(gpio_addr);
+	}
+
+	if(gpio_int_hdle){
+		gpio_release(gpio_int_hdle, 2);
+	}
+
+	return ret;
+}
+
+module_init(auo_pixcir_init);
+module_exit(auo_pixcir_cleanup);
+/*module_i2c_driver(auo_pixcir_driver);*/
 
 MODULE_DESCRIPTION("AUO-PIXCIR touchscreen driver");
 MODULE_LICENSE("GPL v2");
